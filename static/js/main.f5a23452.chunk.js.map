{"version":3,"sources":["components/layout/container/LayoutContainar.js","App.js","serviceWorker.js","index.js","resource/img/logo.svg"],"names":["LayoutContainar","state","layBarBut","layBar","width","layMain","routesList","onClick","setState","transform","this","props","routes","cayoutContent","className","style","Input","fluid","icon","placeholder","onChange","e","v","map","n","name","includes","value","push","i","to","path","Component","component","src","logo","alt","href","target","rel","App","StrictMode","Fragment","from","r","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"4SAuFeA,E,4MAhFbC,MAAQ,CACNC,UAAW,GACXC,OAAQ,CAAEC,MAAO,SACjBC,QAAS,CAAED,MAAO,sBAClBE,WAAY,I,EASdC,QAAU,WAGa,OAFF,EAAKN,MAAhBE,OAEGC,MACT,EAAKI,SAAS,CACZN,UAAW,GACXC,OAAQ,CAAEC,MAAO,SACjBC,QAAS,CAAED,MAAO,wBAGpB,EAAKI,SAAS,CACZN,UAAW,CAAEO,UAAW,kBACxBN,OAAQ,CAAEC,MAAO,MACjBC,QAAS,CAAED,MAAO,W,kEAlBtBM,KAAKF,SAAS,CACZF,WAAYI,KAAKC,MAAMC,W,+BAsBjB,IAAD,OACCC,EAAkBH,KAAKC,MAAvBE,cADD,EAE4CH,KAAKT,MAAhDI,EAFD,EAECA,QAASF,EAFV,EAEUA,OAAQD,EAFlB,EAEkBA,UAAWI,EAF7B,EAE6BA,WACpC,OACE,kBAAC,WAAD,KACE,yBAAKQ,UAAU,aAAaC,MAAOZ,GACjC,yBAAKW,UAAU,4BACb,kBAACE,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,SACLC,YAAY,YAEZC,SAAU,SAACC,EAAGC,GACZ,IAAMhB,EAAa,GACnB,EAAKK,MAAMC,OAAOW,KAAI,SAACC,GACjBA,EAAEC,KAAKC,SAASJ,EAAEK,QACpBrB,EAAWsB,KAAKJ,MAIpB,EAAKhB,SAAS,CAAEF,mBAItB,yBAAKQ,UAAU,mBACZR,EAAWiB,KAAI,SAACC,EAAGK,GAAJ,OACd,6BACE,kBAAC,IAAD,CAAMC,GAAIN,EAAEO,MAAOP,EAAEC,YAK7B,yBAAKX,UAAU,cAAcC,MAAOV,GAClC,yBAAKS,UAAU,qBACb,4BACEA,UAAU,6BACVP,QAASG,KAAKH,SAEd,kBAAC,IAAD,CAAkBQ,MAAOb,MAG7B,yBAAKY,UAAU,cAAcC,MAAOV,GACjCQ,S,GA1EiBmB,aCCxBpB,EAAS,CACb,CAAEmB,KAAM,IAAKN,KAAM,OAAQQ,UAK7B,WACE,OACE,4BAAQnB,UAAU,cAChB,yBAAKoB,IAAKC,IAAMrB,UAAU,WAAWsB,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEtB,UAAU,WACVuB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBAXJ,CAAER,KAAM,SAAUN,KAAM,QAASQ,UAAW,iBAAM,SAClD,CAAEF,KAAM,UAAUN,KAAM,WAgDXe,MA1Bf,WACE,OACE,kBAAC,IAAMC,WAAP,KACE,yBAAK3B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEF,OAAQA,EACRC,cACE,kBAAC,IAAM6B,SAAP,KACE,kBAAC,IAAD,CAAUC,KAAK,IAAIb,GAAG,MACrBlB,EAAOW,KAAI,SAACqB,EAAGf,GAAJ,OACV,kBAAC,IAAD,CACEgB,MAAa,IAANhB,EACPE,KAAMa,EAAEb,KACRE,UAAWW,EAAEX,sBClCba,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.f5a23452.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { RiArrowLeftSLine } from \"react-icons/ri\";\r\nimport { Input } from \"semantic-ui-react\";\r\n\r\nclass LayoutContainar extends Component {\r\n  state = {\r\n    layBarBut: {},\r\n    layBar: { width: \"300px\" },\r\n    layMain: { width: \"calc(100% - 300px)\" },\r\n    routesList: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      routesList: this.props.routes,\r\n    });\r\n  }\r\n\r\n  onClick = () => {\r\n    const { layBar } = this.state;\r\n\r\n    if (layBar.width === \"0%\") {\r\n      this.setState({\r\n        layBarBut: {},\r\n        layBar: { width: \"300px\" },\r\n        layMain: { width: \"calc(100% - 300px)\" },\r\n      });\r\n    } else {\r\n      this.setState({\r\n        layBarBut: { transform: \"rotate(180deg)\" },\r\n        layBar: { width: \"0%\" },\r\n        layMain: { width: \"100%\" },\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { cayoutContent } = this.props;\r\n    const { layMain, layBar, layBarBut, routesList } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <div className=\"layout-bar\" style={layBar}>\r\n          <div className=\"layout-bar-search center\">\r\n            <Input\r\n              fluid\r\n              icon=\"search\"\r\n              placeholder=\"Search...\"\r\n              // value={this.state.value}\r\n              onChange={(e, v) => {\r\n                const routesList = [];\r\n                this.props.routes.map((n) => {\r\n                  if (n.name.includes(v.value)) {\r\n                    routesList.push(n);\r\n                  }\r\n                });\r\n\r\n                this.setState({ routesList });\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"layout-bar-list\">\r\n            {routesList.map((n, i) => (\r\n              <div>\r\n                <Link to={n.path}>{n.name}</Link>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"layout-main\" style={layMain}>\r\n          <div className=\"layout-bar-button\">\r\n            <button\r\n              className=\"ui icon right button huge \"\r\n              onClick={this.onClick}\r\n            >\r\n              <RiArrowLeftSLine style={layBarBut} />\r\n            </button>\r\n          </div>\r\n          <div className=\"lay-content\" style={layMain}>\r\n            {cayoutContent}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default LayoutContainar;\r\n","import React from \"react\";\n\nimport logo from \"./resource/img/logo.svg\";\nimport { BrowserRouter, Route, Switch, Link, Redirect } from \"react-router-dom\";\n\nimport { Layout } from \"./components/layout\";\n\nconst routes = [\n  { path: \"/\", name: \"Home\", component: Home },\n  { path: \"/test1\", name: \"test1\", component: () => \"!!!!\" },\n  { path: \"/scroll\",name: \"scroll\",},\n];\n\nfunction Home() {\n  return (\n    <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <p>\n        Edit <code>src/App.js</code> and save to reload.\n      </p>\n      <a\n        className=\"App-link\"\n        href=\"https://reactjs.org\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Learn React\n      </a>\n    </header>\n  );\n}\n\nfunction App() {\n  return (\n    <React.StrictMode>\n      <div className=\"App\">\n        <BrowserRouter>\n          <Layout\n            routes={routes}\n            cayoutContent={\n              <React.Fragment>\n                <Redirect from=\"/\" to=\"/\" />\n                {routes.map((r, i) => (\n                  <Route\n                    exact={i === 0}\n                    path={r.path}\n                    component={r.component}\n                  />\n                ))}\n              </React.Fragment>\n            }\n          />\n        </BrowserRouter>\n      </div>\n    </React.StrictMode>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./resource/css/index.css\";\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}